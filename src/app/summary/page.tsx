'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useUser, SignOutButton } from '@clerk/nextjs'
import Link from 'next/link'

interface DecisionData {
  id: string
  decision: string
  category: string
  timerMinutes: number
  createdAt: string
  status: string
  flowData?: {
    pros: string[]
    cons: string[]
    emotionScore: number
    aiInsight?: string
  }
  completedAt?: string
}

const EMOTION_LABELS = [
  { value: 1, label: 'Stressed', emoji: 'üò∞' },
  { value: 2, label: 'Worried', emoji: 'üòü' },
  { value: 3, label: 'Uncertain', emoji: 'üòê' },
  { value: 4, label: 'Hopeful', emoji: 'üôÇ' },
  { value: 5, label: 'Confident', emoji: 'üòä' },
]

export default function DecisionSummary() {
  const router = useRouter()
  const { user, isSignedIn } = useUser()
  const [decisionData, setDecisionData] = useState<DecisionData | null>(null)
  const [finalDecision, setFinalDecision] = useState<'yes' | 'no' | null>(null)
  const [confidence, setConfidence] = useState(5)
  const [notes, setNotes] = useState('')
  const [isSaving, setIsSaving] = useState(false)
  const [showExportOptions, setShowExportOptions] = useState(false)
  const [showBottomSheet, setShowBottomSheet] = useState(false)
  const [bottomSheetStep, setBottomSheetStep] = useState<'decision' | 'details'>('decision')

  useEffect(() => {
    const stored = localStorage.getItem('completedDecision')
    if (!stored) {
      router.push('/new-decision')
      return
    }
    
    const data = JSON.parse(stored)
    setDecisionData(data)
  }, [router])

  const handleSaveDecision = async () => {
    if (!decisionData || finalDecision === null) return

    setIsSaving(true)
    try {
      const finalData = {
        ...decisionData,
        finalDecision,
        confidence,
        notes,
        decidedAt: new Date().toISOString(),
        status: 'completed'
      }

      if (isSignedIn) {
        // TODO: Save to Supabase
        console.log('Would save to database:', finalData)
      }

      // Save to localStorage for history
      const existingHistory = JSON.parse(localStorage.getItem('decisionHistory') || '[]')
      existingHistory.unshift(finalData)
      localStorage.setItem('decisionHistory', JSON.stringify(existingHistory))

      // Clear current decision
      localStorage.removeItem('currentDecision')
      localStorage.removeItem('completedDecision')

      router.push('/history')
    } catch (error) {
      console.error('Error saving decision:', error)
    } finally {
      setIsSaving(false)
    }
  }

  const handleEdit = () => {
    if (decisionData) {
      localStorage.setItem('currentDecision', JSON.stringify(decisionData))
      router.push('/flow')
    }
  }

  const handleMobileDecisionSelect = (decision: 'yes' | 'no') => {
    setFinalDecision(decision)
    setBottomSheetStep('details')
  }

  const openBottomSheet = () => {
    setShowBottomSheet(true)
    setBottomSheetStep('decision')
  }

  const closeBottomSheet = () => {
    setShowBottomSheet(false)
  }

  const exportAsText = () => {
    if (!decisionData) return

    const emotion = EMOTION_LABELS.find(e => e.value === decisionData.flowData?.emotionScore)
    
    const exportText = `
DECISION SUMMARY
================

Decision: ${decisionData.decision}
Category: ${decisionData.category}
Date: ${new Date(decisionData.createdAt).toLocaleDateString()}

PROS:
${decisionData.flowData?.pros?.map(pro => `‚Ä¢ ${pro}`).join('\n') || 'None listed'}

CONS:
${decisionData.flowData?.cons?.map(con => `‚Ä¢ ${con}`).join('\n') || 'None listed'}

EMOTIONAL STATE: ${emotion?.emoji} ${emotion?.label} (${decisionData.flowData?.emotionScore}/5)

AI INSIGHT:
${decisionData.flowData?.aiInsight || 'None generated'}

FINAL DECISION: ${finalDecision ? 'YES' : finalDecision === false ? 'NO' : 'Pending'}
CONFIDENCE: ${confidence}/10
NOTES: ${notes || 'None'}

Generated by Decision Timeout
    `.trim()

    const blob = new Blob([exportText], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `decision-${decisionData.id}.txt`
    a.click()
    URL.revokeObjectURL(url)
  }

  if (!decisionData) {
    return (
      <div className="min-h-screen bg-slate-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin w-8 h-8 border-2 border-indigo-600 border-t-transparent rounded-full mx-auto mb-4"></div>
          <p>Loading summary...</p>
        </div>
      </div>
    )
  }

  const emotion = EMOTION_LABELS.find(e => e.value === decisionData.flowData?.emotionScore)

  return (
    <div className="min-h-screen bg-slate-50">
      {/* Header */}
      <div className="bg-white border-b border-slate-200 sticky top-0 z-10">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <button
              onClick={handleEdit}
              className="text-indigo-600 hover:text-indigo-700 flex items-center gap-2"
            >
              ‚Üê Edit Decision
            </button>
            <h1 className="text-lg font-semibold text-slate-900">Decision Summary</h1>
            <div className="flex items-center gap-3">
              <button
                onClick={() => setShowExportOptions(!showExportOptions)}
                className="text-slate-600 hover:text-slate-900"
              >
                Export
              </button>
              <SignOutButton redirectUrl="/">
                <button className="text-slate-600 hover:text-slate-900 text-sm">
                  Sign out
                </button>
              </SignOutButton>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Decision Overview */}
        <div className="bg-white rounded-2xl shadow-sm border border-slate-200 p-6 mb-6">
          <div className="flex items-start justify-between mb-4">
            <div>
              <h2 className="text-2xl font-bold text-slate-900 mb-2">{decisionData.decision}</h2>
              <div className="flex items-center gap-4 text-sm text-slate-600">
                <span className="bg-slate-100 px-2 py-1 rounded-full">{decisionData.category}</span>
                <span>{new Date(decisionData.createdAt).toLocaleDateString()}</span>
                {emotion && (
                  <span className="flex items-center gap-1">
                    {emotion.emoji} {emotion.label}
                  </span>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Pros & Cons Summary */}
        <div className="grid md:grid-cols-2 gap-6 mb-6">
          <div className="bg-white rounded-lg border border-slate-200 p-6">
            <h3 className="font-semibold text-green-700 mb-4 flex items-center gap-2">
              <span className="w-3 h-3 bg-green-500 rounded-full"></span>
              Pros ({decisionData.flowData?.pros?.length || 0})
            </h3>
            <div className="space-y-2">
              {decisionData.flowData?.pros?.map((pro, index) => (
                <div key={index} className="flex items-start gap-2">
                  <span className="text-green-500 mt-1">‚Ä¢</span>
                  <span className="text-slate-700">{pro}</span>
                </div>
              )) || <p className="text-slate-500 italic">No pros listed</p>}
            </div>
          </div>

          <div className="bg-white rounded-lg border border-slate-200 p-6">
            <h3 className="font-semibold text-red-700 mb-4 flex items-center gap-2">
              <span className="w-3 h-3 bg-red-500 rounded-full"></span>
              Cons ({decisionData.flowData?.cons?.length || 0})
            </h3>
            <div className="space-y-2">
              {decisionData.flowData?.cons?.map((con, index) => (
                <div key={index} className="flex items-start gap-2">
                  <span className="text-red-500 mt-1">‚Ä¢</span>
                  <span className="text-slate-700">{con}</span>
                </div>
              )) || <p className="text-slate-500 italic">No cons listed</p>}
            </div>
          </div>
        </div>

        {/* AI Insight */}
        {decisionData.flowData?.aiInsight && (
          <div className="bg-gradient-to-r from-indigo-50 to-teal-50 rounded-lg border border-indigo-200 p-6 mb-6">
            <h3 className="font-semibold text-indigo-900 mb-3 flex items-center gap-2">
              ‚ú® AI Insight
            </h3>
            <div className="prose prose-sm text-slate-700 whitespace-pre-line">
              {decisionData.flowData.aiInsight}
            </div>
          </div>
        )}

        {/* Mobile Decision CTA - Only visible on mobile */}
        <div className="md:hidden mb-6">
          {finalDecision === null ? (
            <button
              onClick={openBottomSheet}
              className="w-full bg-indigo-600 text-white py-4 px-6 rounded-2xl font-bold text-xl shadow-lg hover:bg-indigo-700 transition-colors"
            >
              ü§î Make Your Decision
            </button>
          ) : (
            <div className="bg-white rounded-2xl shadow-sm border border-slate-200 p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <span className="text-2xl">{finalDecision === 'yes' ? '‚úÖ' : '‚ùå'}</span>
                  <div>
                    <div className="font-semibold">
                      {finalDecision === 'yes' ? 'Yes, I\'ll do it' : 'No, I won\'t do it'}
                    </div>
                    <div className="text-sm text-slate-600">Confidence: {confidence}/10</div>
                  </div>
                </div>
                <button
                  onClick={openBottomSheet}
                  className="text-indigo-600 text-sm font-medium"
                >
                  Edit
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Desktop Final Decision */}
        <div className="hidden md:block bg-white rounded-2xl shadow-sm border border-slate-200 p-6 mb-6">
          <h3 className="text-2xl font-bold text-slate-900 mb-6 text-center">Make Your Decision</h3>
          
          <div className="grid grid-cols-2 gap-4 mb-6">
            <button
              onClick={() => setFinalDecision('yes')}
              className={`p-6 rounded-lg border-2 transition-all text-center ${
                finalDecision === 'yes'
                  ? 'border-green-500 bg-green-50 scale-105'
                  : 'border-slate-200 hover:border-green-300'
              }`}
            >
              <div className="text-4xl mb-2">‚úÖ</div>
              <div className="text-lg font-semibold text-green-700">Yes, I'll do it</div>
            </button>

            <button
              onClick={() => setFinalDecision('no')}
              className={`p-6 rounded-lg border-2 transition-all text-center ${
                finalDecision === 'no'
                  ? 'border-red-500 bg-red-50 scale-105'
                  : 'border-slate-200 hover:border-red-300'
              }`}
            >
              <div className="text-4xl mb-2">‚ùå</div>
              <div className="text-lg font-semibold text-red-700">No, I won't do it</div>
            </button>
          </div>

          {finalDecision !== null && (
            <div className="space-y-6 pt-6 border-t border-slate-200">
              {/* Confidence */}
              <div>
                <label className="block text-sm font-medium text-slate-900 mb-2">
                  How confident are you? ({confidence}/10)
                </label>
                <input
                  type="range"
                  min="1"
                  max="10"
                  value={confidence}
                  onChange={(e) => setConfidence(parseInt(e.target.value))}
                  className="w-full h-2 bg-slate-200 rounded-lg appearance-none cursor-pointer"
                />
                <div className="flex justify-between text-xs text-slate-500 mt-1">
                  <span>Not confident</span>
                  <span>Very confident</span>
                </div>
              </div>

              {/* Notes */}
              <div>
                <label htmlFor="notes" className="block text-sm font-medium text-slate-900 mb-2">
                  Additional notes (optional)
                </label>
                <textarea
                  id="notes"
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  placeholder="Any thoughts or commitments..."
                  className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-none"
                  rows={3}
                />
              </div>

              {/* Save Button */}
              <button
                onClick={handleSaveDecision}
                disabled={isSaving}
                className="w-full bg-indigo-600 text-white py-4 rounded-lg font-medium text-lg hover:bg-indigo-700 disabled:bg-slate-300 disabled:cursor-not-allowed transition-colors"
              >
                {isSaving ? 'Saving...' : 'Lock in Decision'}
              </button>

              <p className="text-sm text-slate-600 text-center">
                üí° This decision will be locked for 30 days to help you commit and avoid second-guessing
              </p>
            </div>
          )}
        </div>

        {/* Export Options */}
        {showExportOptions && (
          <div className="bg-white rounded-lg border border-slate-200 p-4">
            <h3 className="font-semibold text-slate-900 mb-3">Export Options</h3>
            <div className="flex gap-3">
              <button
                onClick={exportAsText}
                className="bg-slate-100 text-slate-700 px-4 py-2 rounded-lg hover:bg-slate-200"
              >
                Export as Text
              </button>
              {!isSignedIn && (
                <div className="flex items-center gap-2">
                  <span className="text-sm text-slate-500">Sign up for more export options</span>
                  <Link
                    href="/sign-up"
                    className="text-sm bg-indigo-600 text-white px-3 py-2 rounded-lg hover:bg-indigo-700"
                  >
                    Sign Up
                  </Link>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Bottom Sheet for Mobile */}
        <div className={`bottom-sheet-overlay ${showBottomSheet ? 'open' : ''}`} onClick={closeBottomSheet}></div>
        <div className={`bottom-sheet ${showBottomSheet ? 'open' : ''}`}>
          <div className="bottom-sheet-handle"></div>
          
          {bottomSheetStep === 'decision' && (
            <div className="px-6 pb-6">
              <h3 className="text-2xl font-bold text-slate-900 mb-6 text-center">Make Your Decision</h3>
              
              <div className="space-y-4 mb-6">
                <button
                  onClick={() => handleMobileDecisionSelect('yes')}
                  className="w-full p-6 rounded-lg border-2 border-slate-200 hover:border-green-300 transition-all text-center active:scale-95"
                >
                  <div className="text-4xl mb-2">‚úÖ</div>
                  <div className="text-lg font-semibold text-green-700">Yes, I'll do it</div>
                </button>

                <button
                  onClick={() => handleMobileDecisionSelect('no')}
                  className="w-full p-6 rounded-lg border-2 border-slate-200 hover:border-red-300 transition-all text-center active:scale-95"
                >
                  <div className="text-4xl mb-2">‚ùå</div>
                  <div className="text-lg font-semibold text-red-700">No, I won't do it</div>
                </button>
              </div>
            </div>
          )}

          {bottomSheetStep === 'details' && finalDecision !== null && (
            <div className="px-6 pb-6 space-y-6">
              <div className="text-center">
                <div className="text-4xl mb-2">
                  {finalDecision === 'yes' ? '‚úÖ' : '‚ùå'}
                </div>
                <h3 className="text-xl font-bold text-slate-900">
                  {finalDecision === 'yes' ? 'Yes, I\'ll do it!' : 'No, I won\'t do it'}
                </h3>
              </div>

              {/* Confidence */}
              <div>
                <label className="block text-sm font-medium text-slate-900 mb-2">
                  How confident are you? ({confidence}/10)
                </label>
                <input
                  type="range"
                  min="1"
                  max="10"
                  value={confidence}
                  onChange={(e) => setConfidence(parseInt(e.target.value))}
                  className="w-full h-3 bg-slate-200 rounded-lg appearance-none cursor-pointer"
                />
                <div className="flex justify-between text-xs text-slate-500 mt-1">
                  <span>Not confident</span>
                  <span>Very confident</span>
                </div>
              </div>

              {/* Notes */}
              <div>
                <label htmlFor="mobile-notes" className="block text-sm font-medium text-slate-900 mb-2">
                  Additional notes (optional)
                </label>
                <textarea
                  id="mobile-notes"
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  placeholder="Any thoughts or commitments..."
                  className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-none"
                  rows={3}
                />
              </div>

              {/* Action Buttons */}
              <div className="space-y-3">
                <button
                  onClick={handleSaveDecision}
                  disabled={isSaving}
                  className="w-full bg-indigo-600 text-white py-4 rounded-lg font-bold text-lg hover:bg-indigo-700 disabled:bg-slate-300 disabled:cursor-not-allowed transition-colors active:scale-95"
                >
                  {isSaving ? 'Saving...' : 'Lock in Decision'}
                </button>

                <button
                  onClick={() => setBottomSheetStep('decision')}
                  className="w-full text-slate-600 py-2 font-medium"
                >
                  ‚Üê Change Decision
                </button>
              </div>

              <p className="text-sm text-slate-600 text-center">
                üí° This decision will be locked for 30 days to help you commit
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}